#!/bin/bash
# Chrome Debugger Nginx Reverse Proxy Installation Script
# For AWS EC2 Amazon Linux 2023
# Author: Terragon Labs

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables
CHROME_PORT=${CHROME_PORT:-9222}
NGINX_PORT=$((CHROME_PORT + 1))
NGINX_USER="nginx"
NGINX_GROUP="nginx"

echo -e "${BLUE}=== Chrome Debugger Nginx Reverse Proxy Setup ===${NC}"
echo -e "${BLUE}Chrome debugger port: ${CHROME_PORT}${NC}"
echo -e "${BLUE}Nginx proxy port: ${NGINX_PORT}${NC}"
echo ""

# Function to log messages
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root (use sudo)"
fi

# Update system packages
log "Updating system packages..."
dnf update -y

# Install nginx
log "Installing nginx..."
dnf install -y nginx

# Install Chrome dependencies
log "Installing Chrome dependencies..."
dnf install -y \
    wget \
    unzip \
    xorg-x11-server-Xvfb \
    gtk3 \
    libXScrnSaver \
    GConf2 \
    alsa-lib \
    at-spi2-atk \
    cups-libs \
    gtk3 \
    libdrm \
    libxkbcommon \
    libXrandr \
    mesa-libgbm \
    xorg-x11-fonts-100dpi \
    xorg-x11-fonts-75dpi \
    xorg-x11-fonts-Type1 \
    xorg-x11-fonts-cyrillic

# Download and install Google Chrome
log "Installing Google Chrome..."
if ! command -v google-chrome &> /dev/null; then
    wget -q -O /tmp/google-chrome.rpm "https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
    dnf install -y /tmp/google-chrome.rpm
    rm -f /tmp/google-chrome.rpm
else
    log "Google Chrome already installed"
fi

# Create nginx directories
log "Setting up nginx directories..."
mkdir -p /etc/nginx/sites-available
mkdir -p /etc/nginx/sites-enabled
mkdir -p /var/log/nginx

# Backup original nginx configuration
if [[ -f /etc/nginx/nginx.conf ]]; then
    log "Backing up original nginx configuration..."
    cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup.$(date +%Y%m%d_%H%M%S)
fi

# Copy nginx configuration files
log "Installing nginx configuration..."
cp nginx.conf /etc/nginx/nginx.conf
cp chrome-debugger.conf /etc/nginx/sites-available/chrome-debugger.conf

# Enable the site
ln -sf /etc/nginx/sites-available/chrome-debugger.conf /etc/nginx/sites-enabled/chrome-debugger.conf

# Update port in configuration if different from default
if [[ ${CHROME_PORT} -ne 9222 ]]; then
    log "Updating configuration for Chrome port ${CHROME_PORT}..."
    sed -i "s/listen 9223/listen ${NGINX_PORT}/g" /etc/nginx/sites-available/chrome-debugger.conf
    sed -i "s/listen \[::\]:9223/listen [::]:${NGINX_PORT}/g" /etc/nginx/sites-available/chrome-debugger.conf
    sed -i "s/127.0.0.1:9222/127.0.0.1:${CHROME_PORT}/g" /etc/nginx/sites-available/chrome-debugger.conf
    sed -i "s/--remote-debugging-port=9222/--remote-debugging-port=${CHROME_PORT}/g" /etc/nginx/sites-available/chrome-debugger.conf
fi

# Test nginx configuration
log "Testing nginx configuration..."
if ! nginx -t; then
    error "Nginx configuration test failed"
fi

# Set proper permissions
log "Setting file permissions..."
chown -R ${NGINX_USER}:${NGINX_GROUP} /var/log/nginx
chmod 755 /etc/nginx/sites-available
chmod 755 /etc/nginx/sites-enabled
chmod 644 /etc/nginx/sites-available/chrome-debugger.conf

# Configure SELinux (if enabled)
if command -v getenforce &> /dev/null && [[ $(getenforce) != "Disabled" ]]; then
    log "Configuring SELinux for nginx..."
    setsebool -P httpd_can_network_connect 1
    setsebool -P httpd_can_network_relay 1
    
    # Allow nginx to bind to custom ports
    semanage port -a -t http_port_t -p tcp ${NGINX_PORT} 2>/dev/null || \
    semanage port -m -t http_port_t -p tcp ${NGINX_PORT} 2>/dev/null || \
    warn "Could not configure SELinux port ${NGINX_PORT}. You may need to do this manually."
fi

# Configure firewall
log "Configuring firewall..."
if systemctl is-active --quiet firewalld; then
    firewall-cmd --permanent --add-port=${NGINX_PORT}/tcp
    firewall-cmd --reload
    log "Opened port ${NGINX_PORT} in firewall"
else
    warn "Firewalld is not running. Please manually open port ${NGINX_PORT} if needed"
fi

# Enable and start nginx
log "Starting nginx service..."
systemctl enable nginx
systemctl start nginx

# Create Chrome startup script
log "Creating Chrome startup script..."
cat > /usr/local/bin/start-chrome-debug.sh << EOF
#!/bin/bash
# Chrome Remote Debugging Startup Script
# Generated by Terragon Labs installer

CHROME_PORT=\${CHROME_PORT:-${CHROME_PORT}}
DISPLAY=\${DISPLAY:-:99}

# Start Xvfb if not already running
if ! pgrep -f "Xvfb \$DISPLAY" > /dev/null; then
    echo "Starting Xvfb on display \$DISPLAY..."
    Xvfb \$DISPLAY -screen 0 1920x1080x24 &
    sleep 2
fi

# Kill existing Chrome processes
pkill -f google-chrome || true
sleep 2

# Start Chrome with remote debugging
echo "Starting Chrome with remote debugging on port \$CHROME_PORT..."
DISPLAY=\$DISPLAY google-chrome \\
    --headless \\
    --no-sandbox \\
    --disable-dev-shm-usage \\
    --disable-gpu \\
    --remote-debugging-address=0.0.0.0 \\
    --remote-debugging-port=\$CHROME_PORT \\
    --user-data-dir=/tmp/chrome-debug-\$CHROME_PORT \\
    --enable-logging \\
    --log-level=0 \\
    --v=1 \\
    about:blank &

# Wait for Chrome to start
sleep 5

# Verify Chrome is running
if curl -s "http://localhost:\$CHROME_PORT/json" > /dev/null; then
    echo "Chrome debugger is running on port \$CHROME_PORT"
    echo "Nginx proxy is available on port $((CHROME_PORT + 1))"
    echo "Access DevTools at: http://your-ec2-ip:$((CHROME_PORT + 1))"
else
    echo "ERROR: Chrome debugger failed to start"
    exit 1
fi
EOF

chmod +x /usr/local/bin/start-chrome-debug.sh

# Create systemd service for Chrome debugging
log "Creating Chrome debugging service..."
cat > /etc/systemd/system/chrome-debug.service << EOF
[Unit]
Description=Chrome Remote Debugging Service
After=network.target

[Service]
Type=forking
User=nginx
Group=nginx
Environment=DISPLAY=:99
Environment=CHROME_PORT=${CHROME_PORT}
ExecStart=/usr/local/bin/start-chrome-debug.sh
ExecStop=/bin/pkill -f google-chrome
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Enable Chrome debug service
systemctl daemon-reload
systemctl enable chrome-debug.service

# Final status check
log "Verifying installation..."
if systemctl is-active --quiet nginx; then
    log "✓ Nginx is running"
else
    error "✗ Nginx failed to start"
fi

if nginx -t &>/dev/null; then
    log "✓ Nginx configuration is valid"
else
    error "✗ Nginx configuration has errors"
fi

echo ""
echo -e "${GREEN}=== Installation Complete ===${NC}"
echo -e "${GREEN}Chrome debugger port: ${CHROME_PORT}${NC}"
echo -e "${GREEN}Nginx proxy port: ${NGINX_PORT}${NC}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Start Chrome debugging: sudo systemctl start chrome-debug"
echo "2. Check Chrome status: sudo systemctl status chrome-debug"
echo "3. View nginx logs: sudo tail -f /var/log/nginx/chrome_debugger_access.log"
echo "4. Test connection: curl http://localhost:${NGINX_PORT}/health"
echo ""
echo -e "${BLUE}External access URL: http://YOUR_EC2_PUBLIC_IP:${NGINX_PORT}${NC}"
echo -e "${YELLOW}Remember to open port ${NGINX_PORT} in your EC2 Security Group!${NC}"
